= Ejercicio 1 =

1) Cree un repositorio git a partir del contenido del fichero .zip que se le ofrece. Asegúrese de que no incluye en el repositorio ficheros innecesarios.

2) Añada el siguiente método 'multiplica' en la clase 'App1':

   public static int multiplica(int a, int b){
      int result= a*b;
      log.info("Returning "+a+"*"+b+"="+result);
      return result;
   }

3) Cree una rama 'next'.

4) En la rama 'next', revierta el commit que añade el método 'multiplica'.

4) Desde la rama master, renombre el método 'multiplica' a 'multiplicacion'.

5) Una la rama 'master' y la 'next'.

6) Entrega: Envíe un fichero zip con la carpeta al email: pneira@us.es.
Emplee como asunto [EGC][1EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.


= Ejercicio 2 =

1) Crea un pom.xml para que Maven compile adecuadamente el proyecto teniendo en cuenta que:
   - El proyecto debe pertenecer al grupo es.us.egc, su formato de empaquetamiento debe ser jar, el artifactId debe ser tu UVUS y la versión debe ser la 1.8.2
   - El proyecto utiliza las librerías slf4j-api y slf4j-simple para logging (versión 1.7.0) y JUnit 4 para ejecutar las pruebas unitarias.
   - Debe hacer uso del plugin assembly (https://maven.apache.org/plugins/maven-assembly-plugin/usage.html) para que, en la fase package, haga un JAR que incluya las dependencias y cuyo punto de entrada sea la clase App1.

2) Crea un fichero Dockerfile que parta de una imagen de Java (por ejemplo, openjdk:8-alpine), añada el JAR generado por el plugin assembly y lo ejecute (el comando para ejecutar en un Dockerfile es CMD).

3) Lanza la imagen de Docker llamada resinas/egc1718feb de forma que redirija la carpeta 'content' de tu máquina (incluida en el ZIP) a la carpeta '/files' del contenedor. Crea un fichero docker.txt con el comando de Docker que has utilizado y el contenido que aparece en pantalla.

4) Limpia todos los artefactos de construcción del proyecto haciendo uso de Maven.

5) Entrega: Envíe un fichero zip con la carpeta al email: resinas@us.es. Emplee como asunto [EGC][2EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.


= Ejercicio 3 =

En el fichero ej3.zip, tenemos un proyecto Java para la conexión de una base de datos MySQL. Se pide:

1) Realiza la construcción automática del proyecto con Travis incluyendo el fichero de configuración correspondiente.     

2) Configura Travis CI para que siempre envíe una notificación al correo one@example.com, cuando haya un nuevo build, tanto en caso de éxito como de error.

3) Modifica el fichero de configuración de Travis para que construya el proyecto utilizando una base de datos MySQL, cree la base de datos y las variables de entorno DATABASE, DB_USERNAME y DB_PASSWORD. El nombre de la base de datos es example, el usuario es travis y la contraseña vacía.

4) (Extra) Finalmente, realice los pasos necesarios para desplegar el proyecto de manera automática en Heroku a través de Travis. Incluya la url del despliegue de la aplicación en el fichero README.md del proyecto.

5) Entrega: Envía un fichero zip con la carpeta al email: amarquez6@us.es. Emplee como asunto [EGC][3EJ] Apellidos, Nombre. Ponga en copia también el correo electrónico del profesor que está en el aula para que pueda comprobar la entrega.

IMPORTANTE: Si no has hecho el ejercicio, envía el correo con el contenido: "No realizado". Si falta correo para algún ejercicio se considerará como NO PRESENTADO a la totalidad del examen.